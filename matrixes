What is this place?
Simply, playground for 3d rendering etc.

SOLVED
//[1.000000, 0.000000, -0.00010, 0.000000 ]
//[0.000000, 1.000000, 0.000000, 2.760000 ]
//[0.000100, 0.000000, 1.000000, 5.120000 ]
//[0.000000, 0.000000, 0.000000, 1.000000 ]
//
//[0.647032, 0.000000,-0.420100, 0.000000 ]
//[0.000000, 1.000000, 0.000000, 2.760000 ]
//[0.420100, 0.000000, 0.647032, 5.120000 ]
//[0.000000, 0.000000, 0.000000, 1.000000 ]

SOLVED
//
//MVM
//
//A B C D
//E F G H
//I J K L
//M N O P
//
//W X Y Z
//Wo Xo Yo Zo
//
//Wo = 0
//Wo += A, B, C, D * W, X, Y, Z
//
//= Dot products


UNSOLVED
|
|
|     /
|    /
|   /
|__/___________
  /

|
|______
||    /|
||   / |
||  /  |
||_/___|_______CutOff
 |/____|


SOLVED
//- script 1
//- script 2
//- script 3
//- main script -> /
//- script 4      /   
//- script 5     /
//...           / 
//execute______/
//

SOLVED
//main start(){
//     loading all the resources...
//     ordering all the scripts ?
//     ORDER all the scripts in order
//}
//main update(){
//   X doesnt needed
//}

SOLVED
//void matrixCombine(const matrix3x3 a, const matrix3x3 b, matrix3x3 c) {
//    for(int i =0; i < 3;i++)
//        for(int n =0; n < 3; n++)
//            c[i][n] = a[i][0] * b[0][n] + a[i][1] * b[1][n] + a[i][2] * b[2][n];
//}
//
//
//A B C
//D E F
//G H I
//
//A1B1C1
//D1E1F1
//G1H1I1
//
//A2 = (A * A1) + () + ()

SOLVED
//Box1
//Box2
//Box3
//Box4
 ____
//|    |  ____
//|   _|_|_   |
//|__|_| | |  |
//   |   | |  |
//   |___|_|  |
//       |____|
//____
//|   |
//|   |
//|___|

DISCARDED
//Portals: 
//Near plane = The distance of the player from the portal
//Aspect ratio = of the portal

#include <cmath>
#include "types.hh"
void RotationX(matrix3x3 mat, double w) {
    double a = 1;
    double b = cos(w);
    double c = -sin(w);
    double d = cos(w);
    double e = sin(w);
    mat[0][0] = a;
    mat[0][1] = 0;
    mat[0][2] = 0;
    
    mat[1][0] = 0;
    mat[1][1] = b;
    mat[1][2] = c;
    
    mat[2][0] = 0;
    mat[2][1] = e;
    mat[2][2] = d;
}

void RotationY(matrix3x3 mat, double w) {
    double a = cos(w);
    double b = sin(w);
    double c = 1;

    double d = -sin(w);
    double e = cos(w);
    mat[0][0] = a;
    mat[0][1] = 0;
    mat[0][2] = b;

    mat[1][0] = 0;
    mat[1][1] = c;
    mat[1][2] = 0;
    
    mat[2][0] = d;
    mat[2][1] = 0;
    mat[2][2] = e;
}
void RotationZ(matrix3x3 mat, double w) {
    double a = cos(w);
    double b = -sin(w);
    
    double c = sin(w);
    double d = cos(w);
    double e = 1;
    mat[0][0] = a;
    mat[0][1] = b;
    mat[0][2] = 0;
    
    mat[1][0] = c;
    mat[1][1] = d;
    mat[1][2] = 0;

    mat[2][0] = 0;
    mat[2][1] = 0;
    mat[2][2] = e;
}
